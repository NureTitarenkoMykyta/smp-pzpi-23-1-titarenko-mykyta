 
 
Міністерство освіти і науки України 
 
 
 
Харківський національний університет радіоелектроніки 
 
 
 
 
 
 
 
Кафедра програмної інженерії 
 
 
 



 
Звіт з практичної роботи №1 з дисципліни «Скриптові мови програмування» 
 
 
 
 
 






 
Виконав:                                                                              Перевірили: 
гр.ПЗПІ-23-1                                                                       Сокорчук Ігор 
Тітаренко Микита                                                              Петрович 
 
 
 
 


Харків 2025 
ЗАВДАННЯ 
 
Написатати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких
сусідні рядки відрізняються на два символи та складаються почергово
або з символів «*» або з символів «#»
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах
вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.

 
 
 
 
 
 
 
 
 
 
ХІД РОБОТИ 
 
1.	Створення функції print_chars для виведення символу
1.1.	Зчитування параметрів функцій через $1 $2 для збереження кількості потрібного символу і самого символу. 
1.2.	Використання конструкції for ((...)); do ... done для роздрукування символа певну кількість разів, створивши ітератор, перевіряючи умову і збільшуючи ітератор на 1, поки він буде не дорівнювати chars_count. 
2.	Реалізація функції  draw_branch_tier для виведення ярусу гілки
2.1.	Отримання висоти гілки через параметр $1 і збереження в змінну height. 
2.2.	Використання конструкції while ... do ... done для виклику функції print_chars, зменшуючи height на 1 після ітерації і перевіряючи чи дорівнює ця змінна 0.
2.3.	Виклик функції print_chars з символом ` ` (відступ) для створення потрібного відступу і з символом `#` або `*` (змінюється після кожної ітерації використовуючи if ... then ... fi).
3.	Виведення усіх частин ялинки
3.1.	Виведення верхньої зірочки (*), зробивши потрібний відступ через функцію print_chars. 
3.2.	Реалізуємо основні методи onCreateView, onViewCreated, тощо. 
3.3.	Використання конструкції until ... do ... done для виведення двох ярусів гілок (ітерація доки branch_count не дорівнює 0). 
3.4.	Використання конструкції for ... in .. do ... done для виведення стовбуру дерева (так як висота дерева стала (2), проходження по числам 1 і 2).
3.5.	Створення снігу під деревом, викликаючи функцію print_chars, віднімаючи від довжини всього дерева довжину додаткових елементів (стовбура, зірочки і снігу) та додавання додаткового розміру снігу (2).
 
ВИСНОВОК 
 
Отже, виконавши практичну роботу №1, я навчився створювати простий bash скрипт з використання базових конструкцій таких як if, while, until, for. Також, навчився працювати з функціями та отриманням параметрів у функції, реалізація простих математичних операцій.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 




 
 
ВИКОРИСТАНІ ДЖЕРЕЛА 
 
1.	Лекція 3: Умовні конструкції, цикли та функції в bash / Матеріали лекцій з дисципліни / Скриптові мови програмування / dl.nure. URL: https://dl.nure.ua/mod/page/view.php?id=661039 (дата звернення: 15.03.2025). 
2.	Bash Function & How to Use It {Variables, Arguments, Return} / DevOps and Development / KB / phoenixnap. URL:  https://phoenixnap.com/kb/bash-function (дата звернення: 15.03.2025).  

ДОДАТОК Б

1.	#!/bin/bash
2.	
3.	print_chars(){
4.	chars_count=$1
5.	local char=$2
6.	local i
7.	    for ((i = 0; i < chars_count; i++)); do
8.	        echo -n "$char"
9.	    done
10.	}
11.	
12.	
13.	draw_branch_tier(){
14.	    branch_width=3
15.	    height=$1
16.	    char=$2
17.	    while((height != 0)); do
18.	
19.	        print_chars $height ' '
20.	        ((height--))
21.	
22.	        print_chars branch_width $char
23.	        echo ""
24.	        ((branch_width+=2))
25.	        if [[ "$char" == "#" ]]; then
26.	            char="*"
27.	        else
28.	            char="#"
29.	        fi
30.	    done
31.	}
32.	
33.	branch_count=2
34.	trunk_height=2
35.	christmas_tree_size=$1
36.	if [[ $christmas_tree_size -lt 8 ]]; then
37.	    echo "Помилка: мінімальна висота ялинки - 8" >&2
38.	    exit 1
39.	fi
40.	additional_component_size=4
41.	additional_snow_size=$((christmas_tree_size % 2 == 0 ? 3 : 2))
42.	snow_weight=$((christmas_tree_size - additional_component_size + additional_snow_size))
43.	if [[ snow_weight -ne $2 && snow_weight -ne $(($2 - 1)) ]]; then
44.	    echo "Ширина снігу для цього розміру ялинки повинна дорівнювати " $snow_weight >&2
45.	    exit 1
46.	fi
47.	branch_height=$(((christmas_tree_size-additional_component_size)/2 ))
48.	
49.	set -f
50.	
51.	print_chars $((branch_height + 1)) " "
52.	echo "*"
53.	char='#'
54.	until ((branch_count == 0)); do
55.	    if [[ branch_count -eq 1 && $((branch_height % 2)) -eq 1 ]]; then
56.	        char='*'
57.	    fi
58.	    draw_branch_tier branch_height $char
59.	    ((branch_count--))
60.	done
61.	
62.	for i in 1 2; do
63.	    print_chars branch_height " "
64.	    echo "###"
65.	done
66.	
67.	print_chars snow_weight '*'
68.	echo ""
69.	set +f
